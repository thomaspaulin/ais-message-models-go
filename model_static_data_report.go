/*
Ais-Stream WebsocketObjects

OpenAPI 3.0 definitions for the data models used by aisstream.io.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aisStream

import (
	"encoding/json"
)

// StaticDataReport struct for StaticDataReport
type StaticDataReport struct {
	MessageID int32 `json:"MessageID"`
	RepeatIndicator int32 `json:"RepeatIndicator"`
	UserID int32 `json:"UserID"`
	Valid bool `json:"Valid"`
	Reserved int32 `json:"Reserved"`
	PartNumber bool `json:"PartNumber"`
	ReportA StaticDataReportReportA `json:"ReportA"`
	ReportB StaticDataReportReportB `json:"ReportB"`
}

// NewStaticDataReport instantiates a new StaticDataReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticDataReport(messageID int32, repeatIndicator int32, userID int32, valid bool, reserved int32, partNumber bool, reportA StaticDataReportReportA, reportB StaticDataReportReportB) *StaticDataReport {
	this := StaticDataReport{}
	this.MessageID = messageID
	this.RepeatIndicator = repeatIndicator
	this.UserID = userID
	this.Valid = valid
	this.Reserved = reserved
	this.PartNumber = partNumber
	this.ReportA = reportA
	this.ReportB = reportB
	return &this
}

// NewStaticDataReportWithDefaults instantiates a new StaticDataReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticDataReportWithDefaults() *StaticDataReport {
	this := StaticDataReport{}
	return &this
}

// GetMessageID returns the MessageID field value
func (o *StaticDataReport) GetMessageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetMessageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *StaticDataReport) SetMessageID(v int32) {
	o.MessageID = v
}

// GetRepeatIndicator returns the RepeatIndicator field value
func (o *StaticDataReport) GetRepeatIndicator() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepeatIndicator
}

// GetRepeatIndicatorOk returns a tuple with the RepeatIndicator field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetRepeatIndicatorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepeatIndicator, true
}

// SetRepeatIndicator sets field value
func (o *StaticDataReport) SetRepeatIndicator(v int32) {
	o.RepeatIndicator = v
}

// GetUserID returns the UserID field value
func (o *StaticDataReport) GetUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserID, true
}

// SetUserID sets field value
func (o *StaticDataReport) SetUserID(v int32) {
	o.UserID = v
}

// GetValid returns the Valid field value
func (o *StaticDataReport) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *StaticDataReport) SetValid(v bool) {
	o.Valid = v
}

// GetReserved returns the Reserved field value
func (o *StaticDataReport) GetReserved() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetReservedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reserved, true
}

// SetReserved sets field value
func (o *StaticDataReport) SetReserved(v int32) {
	o.Reserved = v
}

// GetPartNumber returns the PartNumber field value
func (o *StaticDataReport) GetPartNumber() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetPartNumberOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartNumber, true
}

// SetPartNumber sets field value
func (o *StaticDataReport) SetPartNumber(v bool) {
	o.PartNumber = v
}

// GetReportA returns the ReportA field value
func (o *StaticDataReport) GetReportA() StaticDataReportReportA {
	if o == nil {
		var ret StaticDataReportReportA
		return ret
	}

	return o.ReportA
}

// GetReportAOk returns a tuple with the ReportA field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetReportAOk() (*StaticDataReportReportA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportA, true
}

// SetReportA sets field value
func (o *StaticDataReport) SetReportA(v StaticDataReportReportA) {
	o.ReportA = v
}

// GetReportB returns the ReportB field value
func (o *StaticDataReport) GetReportB() StaticDataReportReportB {
	if o == nil {
		var ret StaticDataReportReportB
		return ret
	}

	return o.ReportB
}

// GetReportBOk returns a tuple with the ReportB field value
// and a boolean to check if the value has been set.
func (o *StaticDataReport) GetReportBOk() (*StaticDataReportReportB, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportB, true
}

// SetReportB sets field value
func (o *StaticDataReport) SetReportB(v StaticDataReportReportB) {
	o.ReportB = v
}

func (o StaticDataReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["MessageID"] = o.MessageID
	}
	if true {
		toSerialize["RepeatIndicator"] = o.RepeatIndicator
	}
	if true {
		toSerialize["UserID"] = o.UserID
	}
	if true {
		toSerialize["Valid"] = o.Valid
	}
	if true {
		toSerialize["Reserved"] = o.Reserved
	}
	if true {
		toSerialize["PartNumber"] = o.PartNumber
	}
	if true {
		toSerialize["ReportA"] = o.ReportA
	}
	if true {
		toSerialize["ReportB"] = o.ReportB
	}
	return json.Marshal(toSerialize)
}

type NullableStaticDataReport struct {
	value *StaticDataReport
	isSet bool
}

func (v NullableStaticDataReport) Get() *StaticDataReport {
	return v.value
}

func (v *NullableStaticDataReport) Set(val *StaticDataReport) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticDataReport) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticDataReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticDataReport(val *StaticDataReport) *NullableStaticDataReport {
	return &NullableStaticDataReport{value: val, isSet: true}
}

func (v NullableStaticDataReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticDataReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


