/*
Ais-Stream WebsocketObjects

OpenAPI 3.0 definitions for the data models used by aisstream.io.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aisStream

import (
	"encoding/json"
)

// PositionReport struct for PositionReport
type PositionReport struct {
	MessageID int32 `json:"MessageID"`
	RepeatIndicator int32 `json:"RepeatIndicator"`
	UserID int32 `json:"UserID"`
	Valid bool `json:"Valid"`
	NavigationalStatus int32 `json:"NavigationalStatus"`
	RateOfTurn int32 `json:"RateOfTurn"`
	Sog float64 `json:"Sog"`
	PositionAccuracy bool `json:"PositionAccuracy"`
	Longitude float64 `json:"Longitude"`
	Latitude float64 `json:"Latitude"`
	Cog float64 `json:"Cog"`
	TrueHeading int32 `json:"TrueHeading"`
	Timestamp int32 `json:"Timestamp"`
	SpecialManoeuvreIndicator int32 `json:"SpecialManoeuvreIndicator"`
	Spare int32 `json:"Spare"`
	Raim bool `json:"Raim"`
	CommunicationState int32 `json:"CommunicationState"`
}

// NewPositionReport instantiates a new PositionReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionReport(messageID int32, repeatIndicator int32, userID int32, valid bool, navigationalStatus int32, rateOfTurn int32, sog float64, positionAccuracy bool, longitude float64, latitude float64, cog float64, trueHeading int32, timestamp int32, specialManoeuvreIndicator int32, spare int32, raim bool, communicationState int32) *PositionReport {
	this := PositionReport{}
	this.MessageID = messageID
	this.RepeatIndicator = repeatIndicator
	this.UserID = userID
	this.Valid = valid
	this.NavigationalStatus = navigationalStatus
	this.RateOfTurn = rateOfTurn
	this.Sog = sog
	this.PositionAccuracy = positionAccuracy
	this.Longitude = longitude
	this.Latitude = latitude
	this.Cog = cog
	this.TrueHeading = trueHeading
	this.Timestamp = timestamp
	this.SpecialManoeuvreIndicator = specialManoeuvreIndicator
	this.Spare = spare
	this.Raim = raim
	this.CommunicationState = communicationState
	return &this
}

// NewPositionReportWithDefaults instantiates a new PositionReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionReportWithDefaults() *PositionReport {
	this := PositionReport{}
	return &this
}

// GetMessageID returns the MessageID field value
func (o *PositionReport) GetMessageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetMessageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *PositionReport) SetMessageID(v int32) {
	o.MessageID = v
}

// GetRepeatIndicator returns the RepeatIndicator field value
func (o *PositionReport) GetRepeatIndicator() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepeatIndicator
}

// GetRepeatIndicatorOk returns a tuple with the RepeatIndicator field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetRepeatIndicatorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepeatIndicator, true
}

// SetRepeatIndicator sets field value
func (o *PositionReport) SetRepeatIndicator(v int32) {
	o.RepeatIndicator = v
}

// GetUserID returns the UserID field value
func (o *PositionReport) GetUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserID, true
}

// SetUserID sets field value
func (o *PositionReport) SetUserID(v int32) {
	o.UserID = v
}

// GetValid returns the Valid field value
func (o *PositionReport) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *PositionReport) SetValid(v bool) {
	o.Valid = v
}

// GetNavigationalStatus returns the NavigationalStatus field value
func (o *PositionReport) GetNavigationalStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NavigationalStatus
}

// GetNavigationalStatusOk returns a tuple with the NavigationalStatus field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetNavigationalStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NavigationalStatus, true
}

// SetNavigationalStatus sets field value
func (o *PositionReport) SetNavigationalStatus(v int32) {
	o.NavigationalStatus = v
}

// GetRateOfTurn returns the RateOfTurn field value
func (o *PositionReport) GetRateOfTurn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RateOfTurn
}

// GetRateOfTurnOk returns a tuple with the RateOfTurn field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetRateOfTurnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateOfTurn, true
}

// SetRateOfTurn sets field value
func (o *PositionReport) SetRateOfTurn(v int32) {
	o.RateOfTurn = v
}

// GetSog returns the Sog field value
func (o *PositionReport) GetSog() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Sog
}

// GetSogOk returns a tuple with the Sog field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetSogOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sog, true
}

// SetSog sets field value
func (o *PositionReport) SetSog(v float64) {
	o.Sog = v
}

// GetPositionAccuracy returns the PositionAccuracy field value
func (o *PositionReport) GetPositionAccuracy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PositionAccuracy
}

// GetPositionAccuracyOk returns a tuple with the PositionAccuracy field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetPositionAccuracyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositionAccuracy, true
}

// SetPositionAccuracy sets field value
func (o *PositionReport) SetPositionAccuracy(v bool) {
	o.PositionAccuracy = v
}

// GetLongitude returns the Longitude field value
func (o *PositionReport) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *PositionReport) SetLongitude(v float64) {
	o.Longitude = v
}

// GetLatitude returns the Latitude field value
func (o *PositionReport) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *PositionReport) SetLatitude(v float64) {
	o.Latitude = v
}

// GetCog returns the Cog field value
func (o *PositionReport) GetCog() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Cog
}

// GetCogOk returns a tuple with the Cog field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetCogOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cog, true
}

// SetCog sets field value
func (o *PositionReport) SetCog(v float64) {
	o.Cog = v
}

// GetTrueHeading returns the TrueHeading field value
func (o *PositionReport) GetTrueHeading() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrueHeading
}

// GetTrueHeadingOk returns a tuple with the TrueHeading field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetTrueHeadingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrueHeading, true
}

// SetTrueHeading sets field value
func (o *PositionReport) SetTrueHeading(v int32) {
	o.TrueHeading = v
}

// GetTimestamp returns the Timestamp field value
func (o *PositionReport) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PositionReport) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetSpecialManoeuvreIndicator returns the SpecialManoeuvreIndicator field value
func (o *PositionReport) GetSpecialManoeuvreIndicator() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpecialManoeuvreIndicator
}

// GetSpecialManoeuvreIndicatorOk returns a tuple with the SpecialManoeuvreIndicator field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetSpecialManoeuvreIndicatorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecialManoeuvreIndicator, true
}

// SetSpecialManoeuvreIndicator sets field value
func (o *PositionReport) SetSpecialManoeuvreIndicator(v int32) {
	o.SpecialManoeuvreIndicator = v
}

// GetSpare returns the Spare field value
func (o *PositionReport) GetSpare() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Spare
}

// GetSpareOk returns a tuple with the Spare field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetSpareOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spare, true
}

// SetSpare sets field value
func (o *PositionReport) SetSpare(v int32) {
	o.Spare = v
}

// GetRaim returns the Raim field value
func (o *PositionReport) GetRaim() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Raim
}

// GetRaimOk returns a tuple with the Raim field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetRaimOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raim, true
}

// SetRaim sets field value
func (o *PositionReport) SetRaim(v bool) {
	o.Raim = v
}

// GetCommunicationState returns the CommunicationState field value
func (o *PositionReport) GetCommunicationState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommunicationState
}

// GetCommunicationStateOk returns a tuple with the CommunicationState field value
// and a boolean to check if the value has been set.
func (o *PositionReport) GetCommunicationStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationState, true
}

// SetCommunicationState sets field value
func (o *PositionReport) SetCommunicationState(v int32) {
	o.CommunicationState = v
}

func (o PositionReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["MessageID"] = o.MessageID
	}
	if true {
		toSerialize["RepeatIndicator"] = o.RepeatIndicator
	}
	if true {
		toSerialize["UserID"] = o.UserID
	}
	if true {
		toSerialize["Valid"] = o.Valid
	}
	if true {
		toSerialize["NavigationalStatus"] = o.NavigationalStatus
	}
	if true {
		toSerialize["RateOfTurn"] = o.RateOfTurn
	}
	if true {
		toSerialize["Sog"] = o.Sog
	}
	if true {
		toSerialize["PositionAccuracy"] = o.PositionAccuracy
	}
	if true {
		toSerialize["Longitude"] = o.Longitude
	}
	if true {
		toSerialize["Latitude"] = o.Latitude
	}
	if true {
		toSerialize["Cog"] = o.Cog
	}
	if true {
		toSerialize["TrueHeading"] = o.TrueHeading
	}
	if true {
		toSerialize["Timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["SpecialManoeuvreIndicator"] = o.SpecialManoeuvreIndicator
	}
	if true {
		toSerialize["Spare"] = o.Spare
	}
	if true {
		toSerialize["Raim"] = o.Raim
	}
	if true {
		toSerialize["CommunicationState"] = o.CommunicationState
	}
	return json.Marshal(toSerialize)
}

type NullablePositionReport struct {
	value *PositionReport
	isSet bool
}

func (v NullablePositionReport) Get() *PositionReport {
	return v.value
}

func (v *NullablePositionReport) Set(val *PositionReport) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionReport) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionReport(val *PositionReport) *NullablePositionReport {
	return &NullablePositionReport{value: val, isSet: true}
}

func (v NullablePositionReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


