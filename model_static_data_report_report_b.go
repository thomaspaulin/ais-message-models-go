/*
Ais-Stream WebsocketObjects

OpenAPI 3.0 definitions for the data models used by aisstream.io.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aisStream

import (
	"encoding/json"
)

// StaticDataReportReportB struct for StaticDataReportReportB
type StaticDataReportReportB struct {
	Valid bool `json:"Valid"`
	ShipType int32 `json:"ShipType"`
	VendorIDName string `json:"VendorIDName"`
	VenderIDModel int32 `json:"VenderIDModel"`
	VenderIDSerial int32 `json:"VenderIDSerial"`
	CallSign string `json:"CallSign"`
	Dimension ShipStaticDataDimension `json:"Dimension"`
	FixType int32 `json:"FixType"`
	Spare int32 `json:"Spare"`
}

// NewStaticDataReportReportB instantiates a new StaticDataReportReportB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticDataReportReportB(valid bool, shipType int32, vendorIDName string, venderIDModel int32, venderIDSerial int32, callSign string, dimension ShipStaticDataDimension, fixType int32, spare int32) *StaticDataReportReportB {
	this := StaticDataReportReportB{}
	this.Valid = valid
	this.ShipType = shipType
	this.VendorIDName = vendorIDName
	this.VenderIDModel = venderIDModel
	this.VenderIDSerial = venderIDSerial
	this.CallSign = callSign
	this.Dimension = dimension
	this.FixType = fixType
	this.Spare = spare
	return &this
}

// NewStaticDataReportReportBWithDefaults instantiates a new StaticDataReportReportB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticDataReportReportBWithDefaults() *StaticDataReportReportB {
	this := StaticDataReportReportB{}
	return &this
}

// GetValid returns the Valid field value
func (o *StaticDataReportReportB) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *StaticDataReportReportB) SetValid(v bool) {
	o.Valid = v
}

// GetShipType returns the ShipType field value
func (o *StaticDataReportReportB) GetShipType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ShipType
}

// GetShipTypeOk returns a tuple with the ShipType field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetShipTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShipType, true
}

// SetShipType sets field value
func (o *StaticDataReportReportB) SetShipType(v int32) {
	o.ShipType = v
}

// GetVendorIDName returns the VendorIDName field value
func (o *StaticDataReportReportB) GetVendorIDName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VendorIDName
}

// GetVendorIDNameOk returns a tuple with the VendorIDName field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetVendorIDNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorIDName, true
}

// SetVendorIDName sets field value
func (o *StaticDataReportReportB) SetVendorIDName(v string) {
	o.VendorIDName = v
}

// GetVenderIDModel returns the VenderIDModel field value
func (o *StaticDataReportReportB) GetVenderIDModel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VenderIDModel
}

// GetVenderIDModelOk returns a tuple with the VenderIDModel field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetVenderIDModelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VenderIDModel, true
}

// SetVenderIDModel sets field value
func (o *StaticDataReportReportB) SetVenderIDModel(v int32) {
	o.VenderIDModel = v
}

// GetVenderIDSerial returns the VenderIDSerial field value
func (o *StaticDataReportReportB) GetVenderIDSerial() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VenderIDSerial
}

// GetVenderIDSerialOk returns a tuple with the VenderIDSerial field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetVenderIDSerialOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VenderIDSerial, true
}

// SetVenderIDSerial sets field value
func (o *StaticDataReportReportB) SetVenderIDSerial(v int32) {
	o.VenderIDSerial = v
}

// GetCallSign returns the CallSign field value
func (o *StaticDataReportReportB) GetCallSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallSign
}

// GetCallSignOk returns a tuple with the CallSign field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetCallSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallSign, true
}

// SetCallSign sets field value
func (o *StaticDataReportReportB) SetCallSign(v string) {
	o.CallSign = v
}

// GetDimension returns the Dimension field value
func (o *StaticDataReportReportB) GetDimension() ShipStaticDataDimension {
	if o == nil {
		var ret ShipStaticDataDimension
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetDimensionOk() (*ShipStaticDataDimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *StaticDataReportReportB) SetDimension(v ShipStaticDataDimension) {
	o.Dimension = v
}

// GetFixType returns the FixType field value
func (o *StaticDataReportReportB) GetFixType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FixType
}

// GetFixTypeOk returns a tuple with the FixType field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetFixTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixType, true
}

// SetFixType sets field value
func (o *StaticDataReportReportB) SetFixType(v int32) {
	o.FixType = v
}

// GetSpare returns the Spare field value
func (o *StaticDataReportReportB) GetSpare() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Spare
}

// GetSpareOk returns a tuple with the Spare field value
// and a boolean to check if the value has been set.
func (o *StaticDataReportReportB) GetSpareOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spare, true
}

// SetSpare sets field value
func (o *StaticDataReportReportB) SetSpare(v int32) {
	o.Spare = v
}

func (o StaticDataReportReportB) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Valid"] = o.Valid
	}
	if true {
		toSerialize["ShipType"] = o.ShipType
	}
	if true {
		toSerialize["VendorIDName"] = o.VendorIDName
	}
	if true {
		toSerialize["VenderIDModel"] = o.VenderIDModel
	}
	if true {
		toSerialize["VenderIDSerial"] = o.VenderIDSerial
	}
	if true {
		toSerialize["CallSign"] = o.CallSign
	}
	if true {
		toSerialize["Dimension"] = o.Dimension
	}
	if true {
		toSerialize["FixType"] = o.FixType
	}
	if true {
		toSerialize["Spare"] = o.Spare
	}
	return json.Marshal(toSerialize)
}

type NullableStaticDataReportReportB struct {
	value *StaticDataReportReportB
	isSet bool
}

func (v NullableStaticDataReportReportB) Get() *StaticDataReportReportB {
	return v.value
}

func (v *NullableStaticDataReportReportB) Set(val *StaticDataReportReportB) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticDataReportReportB) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticDataReportReportB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticDataReportReportB(val *StaticDataReportReportB) *NullableStaticDataReportReportB {
	return &NullableStaticDataReportReportB{value: val, isSet: true}
}

func (v NullableStaticDataReportReportB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticDataReportReportB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


