/*
Ais-Stream WebsocketObjects

OpenAPI 3.0 definitions for the data models used by aisstream.io.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aisStream

import (
	"encoding/json"
)

// SingleSlotBinaryMessage struct for SingleSlotBinaryMessage
type SingleSlotBinaryMessage struct {
	MessageID int32 `json:"MessageID"`
	RepeatIndicator int32 `json:"RepeatIndicator"`
	UserID int32 `json:"UserID"`
	Valid bool `json:"Valid"`
	DestinationIDValid bool `json:"DestinationIDValid"`
	ApplicationIDValid bool `json:"ApplicationIDValid"`
	DestinationID int32 `json:"DestinationID"`
	Spare int32 `json:"Spare"`
	ApplicationID AddressedBinaryMessageApplicationID `json:"ApplicationID"`
	Payload string `json:"Payload"`
}

// NewSingleSlotBinaryMessage instantiates a new SingleSlotBinaryMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSlotBinaryMessage(messageID int32, repeatIndicator int32, userID int32, valid bool, destinationIDValid bool, applicationIDValid bool, destinationID int32, spare int32, applicationID AddressedBinaryMessageApplicationID, payload string) *SingleSlotBinaryMessage {
	this := SingleSlotBinaryMessage{}
	this.MessageID = messageID
	this.RepeatIndicator = repeatIndicator
	this.UserID = userID
	this.Valid = valid
	this.DestinationIDValid = destinationIDValid
	this.ApplicationIDValid = applicationIDValid
	this.DestinationID = destinationID
	this.Spare = spare
	this.ApplicationID = applicationID
	this.Payload = payload
	return &this
}

// NewSingleSlotBinaryMessageWithDefaults instantiates a new SingleSlotBinaryMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSlotBinaryMessageWithDefaults() *SingleSlotBinaryMessage {
	this := SingleSlotBinaryMessage{}
	return &this
}

// GetMessageID returns the MessageID field value
func (o *SingleSlotBinaryMessage) GetMessageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetMessageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *SingleSlotBinaryMessage) SetMessageID(v int32) {
	o.MessageID = v
}

// GetRepeatIndicator returns the RepeatIndicator field value
func (o *SingleSlotBinaryMessage) GetRepeatIndicator() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepeatIndicator
}

// GetRepeatIndicatorOk returns a tuple with the RepeatIndicator field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetRepeatIndicatorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepeatIndicator, true
}

// SetRepeatIndicator sets field value
func (o *SingleSlotBinaryMessage) SetRepeatIndicator(v int32) {
	o.RepeatIndicator = v
}

// GetUserID returns the UserID field value
func (o *SingleSlotBinaryMessage) GetUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserID, true
}

// SetUserID sets field value
func (o *SingleSlotBinaryMessage) SetUserID(v int32) {
	o.UserID = v
}

// GetValid returns the Valid field value
func (o *SingleSlotBinaryMessage) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *SingleSlotBinaryMessage) SetValid(v bool) {
	o.Valid = v
}

// GetDestinationIDValid returns the DestinationIDValid field value
func (o *SingleSlotBinaryMessage) GetDestinationIDValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DestinationIDValid
}

// GetDestinationIDValidOk returns a tuple with the DestinationIDValid field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetDestinationIDValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationIDValid, true
}

// SetDestinationIDValid sets field value
func (o *SingleSlotBinaryMessage) SetDestinationIDValid(v bool) {
	o.DestinationIDValid = v
}

// GetApplicationIDValid returns the ApplicationIDValid field value
func (o *SingleSlotBinaryMessage) GetApplicationIDValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApplicationIDValid
}

// GetApplicationIDValidOk returns a tuple with the ApplicationIDValid field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetApplicationIDValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationIDValid, true
}

// SetApplicationIDValid sets field value
func (o *SingleSlotBinaryMessage) SetApplicationIDValid(v bool) {
	o.ApplicationIDValid = v
}

// GetDestinationID returns the DestinationID field value
func (o *SingleSlotBinaryMessage) GetDestinationID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DestinationID
}

// GetDestinationIDOk returns a tuple with the DestinationID field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetDestinationIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationID, true
}

// SetDestinationID sets field value
func (o *SingleSlotBinaryMessage) SetDestinationID(v int32) {
	o.DestinationID = v
}

// GetSpare returns the Spare field value
func (o *SingleSlotBinaryMessage) GetSpare() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Spare
}

// GetSpareOk returns a tuple with the Spare field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetSpareOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spare, true
}

// SetSpare sets field value
func (o *SingleSlotBinaryMessage) SetSpare(v int32) {
	o.Spare = v
}

// GetApplicationID returns the ApplicationID field value
func (o *SingleSlotBinaryMessage) GetApplicationID() AddressedBinaryMessageApplicationID {
	if o == nil {
		var ret AddressedBinaryMessageApplicationID
		return ret
	}

	return o.ApplicationID
}

// GetApplicationIDOk returns a tuple with the ApplicationID field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetApplicationIDOk() (*AddressedBinaryMessageApplicationID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationID, true
}

// SetApplicationID sets field value
func (o *SingleSlotBinaryMessage) SetApplicationID(v AddressedBinaryMessageApplicationID) {
	o.ApplicationID = v
}

// GetPayload returns the Payload field value
func (o *SingleSlotBinaryMessage) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *SingleSlotBinaryMessage) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *SingleSlotBinaryMessage) SetPayload(v string) {
	o.Payload = v
}

func (o SingleSlotBinaryMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["MessageID"] = o.MessageID
	}
	if true {
		toSerialize["RepeatIndicator"] = o.RepeatIndicator
	}
	if true {
		toSerialize["UserID"] = o.UserID
	}
	if true {
		toSerialize["Valid"] = o.Valid
	}
	if true {
		toSerialize["DestinationIDValid"] = o.DestinationIDValid
	}
	if true {
		toSerialize["ApplicationIDValid"] = o.ApplicationIDValid
	}
	if true {
		toSerialize["DestinationID"] = o.DestinationID
	}
	if true {
		toSerialize["Spare"] = o.Spare
	}
	if true {
		toSerialize["ApplicationID"] = o.ApplicationID
	}
	if true {
		toSerialize["Payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableSingleSlotBinaryMessage struct {
	value *SingleSlotBinaryMessage
	isSet bool
}

func (v NullableSingleSlotBinaryMessage) Get() *SingleSlotBinaryMessage {
	return v.value
}

func (v *NullableSingleSlotBinaryMessage) Set(val *SingleSlotBinaryMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSlotBinaryMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSlotBinaryMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSlotBinaryMessage(val *SingleSlotBinaryMessage) *NullableSingleSlotBinaryMessage {
	return &NullableSingleSlotBinaryMessage{value: val, isSet: true}
}

func (v NullableSingleSlotBinaryMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSlotBinaryMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


